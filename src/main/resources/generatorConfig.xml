<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
    <!-- 数据库驱动-->
    <classPathEntry  location="/Users/wenpeng/.m2/repository/mysql/mysql-connector-java/5.1.39/mysql-connector-java-5.1.39.jar"/>

    <!--
    context:生成一组对象的环境
    id:必选，上下文id，用于在生成错误时提示
    defaultModelType:指定生成对象的样式
        1，conditional：类似hierarchical；
        2，flat：所有内容（主键，blob）等全部生成在一个对象中；
        3，hierarchical：主键生成一个XXKey对象(key class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record class)
    targetRuntime:
        1，MyBatis3：默认的值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample；
        2，MyBatis3Simple：类似MyBatis3，只是不生成XXXBySample；
    introspectedColumnImpl：类全限定名，用于扩展MBG
    -->
    <context id="default" defaultModelType="flat"  targetRuntime="MyBatis3">
        <!-- optional，旨在创建class时，对注释进行控制 -->
        <!--<commentGenerator>-->
        <!--<property name="suppressDate" value="true"/>-->
        <!--&lt;!&ndash; 是否去除自动生成的注释 true：是 ： false:否 &ndash;&gt;-->
        <!--<property name="suppressAllComments" value="true"/>-->
        <!--</commentGenerator>-->



        <!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表；
             一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖
        -->
        <property name="autoDelimitKeywords" value="false"/>
        <!-- 生成的Java文件的编码 -->
        <property name="javaFileEncoding" value="UTF-8"/>
        <!-- 格式化java代码 -->
        <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>
        <!-- 格式化XML代码 -->
        <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>

        <!--分页插件-->
        <plugin type="org.mybatis.generator.plugins.RowBoundsPlugin"></plugin>
        <!--给Mapper增加@Mapper注解-->
        <plugin type="com.neo.mybatis.generator.plugin.MapperAnnotationPlugin"></plugin>
        <!--生成Spring Service 和 Service Impl插件-->
        <plugin type="com.neo.mybatis.generator.plugin.SpringServiceInterfacePlugin">
            <property name="targetDir" value="../mybatis-generator-plugin/src/main/java"></property>
            <property name="serviceInterfaceTargetPackage" value="com.ktb.service"></property>
            <property name="serviceImplTargetPackage" value="com.ktb.service.impl"></property>
        </plugin>
        <plugin type="com.neo.mybatis.generator.plugin.JacksonAnnotationPlugin"></plugin>


        <commentGenerator>
            <property name="suppressAllComments" value="true" />
        </commentGenerator>



        <!--数据库链接URL，用户名、密码 -->
        <jdbcConnection driverClass="com.mysql.jdbc.Driver" connectionURL="jdbc:mysql://ip:port/name" userId="" password="">
        </jdbcConnection>


        <!-- 非必需，类型处理器，在数据库类型和java类型之间的转换控制-->
        <javaTypeResolver>
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        <!-- 生成模型的包名和位置-->
        <javaModelGenerator targetPackage="com.ktb.model" targetProject="src/main/java">
            <!-- optional.是否对model添加 构造函数 -->
            <property name="constructorBased" value="false"/>
            <!-- 是否允许子包，即targetPackage.schemaName.tableName -->
            <property name="enableSubPackages" value="true"/>
            <!-- optional.建立的Model对象是否 不可改变  即生成的Model对象不会有 setter方法，只有构造方法 -->
            <property name="immutable" value="false"/>
            <!-- 是否对类CHAR类型的列的数据进行trim操作 -->
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>

        <!-- 生成映射文件的包名和位置-->
        <!-- 生成SQL map的XML文件生成器，
        注意，在Mybatis3之后，我们可以使用mapper.xml文件+Mapper接口（或者不用mapper接口），
            或者只使用Mapper接口+Annotation，所以，如果 javaClientGenerator配置中配置了需要生成XML的话，这个元素就必须配置
        targetPackage/targetProject:同javaModelGenerator
        -->
        <sqlMapGenerator targetPackage="/" targetProject="src/main/resources/mappers">
            <property name="enableSubPackages" value="true"/>
        </sqlMapGenerator>

        <!-- 对于mybatis来说，即生成Mapper接口，注意，如果没有配置该元素，那么默认不会生成Mapper接口
       targetPackage/targetProject:同javaModelGenerator
       type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）：
           1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML；
           2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中；
           3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML；
       注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER
       -->
        <javaClientGenerator targetPackage="com.ktb.dao" type="XMLMAPPER" targetProject="src/main/java">
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <property name="enableSubPackages" value="true"/>

            <!-- 可以为所有生成的接口添加一个父接口，但是MBG只负责生成，不负责检查
            <property name="rootInterface" value=""/>
             -->
        </javaClientGenerator>

        <!-- 要生成的表 tableName是数据库中的表名或视图名 domainObjectName是实体类名-->
        <table tableName="Users" domainObjectName="Users"
               enableCountByExample="true"
               enableUpdateByExample="true"
               enableDeleteByExample="true"
               enableSelectByExample="true"
               selectByExampleQueryId="true">
            <property name="jacksonFormats" value="createDate@yyyy-MM-dd HH:mm:ss"></property>

            <!-- optional.插入时,是否生成selectKey元素 -->
            <!--<generatedKey column="id" sqlStatement="SELECT LAST_INSERT_ID()" identity="true" type="post"/>-->

            <!-- optional.忽略某一列 -->
            <!--<ignoreColumn column="gmt_create"  delimitedColumnName="true" />-->

            <!--optional.覆盖Model的生成规则,主要是设置javaType -->
            <!--<columnOverride column="idUser" javaType="java.lang.Long"	jdbcType="INTEGER"	typeHandler=""	delimitedColumnName="" />-->

        </table>

        <table tableName="Groups" domainObjectName="Groups"
               enableCountByExample="true"
               enableUpdateByExample="true"
               enableDeleteByExample="true"
               enableSelectByExample="true"
               selectByExampleQueryId="true">
            <property name="jacksonFormats" value="createDate@yyyy-MM-dd HH:mm:ss"></property>
        </table>

        <table tableName="Policy" domainObjectName="Policy"
               enableCountByExample="true"
               enableUpdateByExample="true"
               enableDeleteByExample="true"
               enableSelectByExample="true"
               selectByExampleQueryId="true">
            <property name="jacksonFormats" value="createDate@yyyy-MM-dd HH:mm:ss"></property>
        </table>

        <table tableName="Roles" domainObjectName="Roles"
               enableCountByExample="true"
               enableUpdateByExample="true"
               enableDeleteByExample="true"
               enableSelectByExample="true"
               selectByExampleQueryId="true">
            <property name="jacksonFormats" value="createDate@yyyy-MM-dd HH:mm:ss"></property>
        </table>

        <table tableName="GroupRoles" domainObjectName="GroupRoles"
               enableCountByExample="true"
               enableUpdateByExample="true"
               enableDeleteByExample="true"
               enableSelectByExample="true"
               selectByExampleQueryId="true">
            <property name="jacksonFormats" value="createDate@yyyy-MM-dd HH:mm:ss"></property>
        </table>

        <table tableName="RolePolicy" domainObjectName="RolePolicy"
               enableCountByExample="true"
               enableUpdateByExample="true"
               enableDeleteByExample="true"
               enableSelectByExample="true"
               selectByExampleQueryId="true">
            <property name="jacksonFormats" value="createDate@yyyy-MM-dd HH:mm:ss"></property>
        </table>

        <table tableName="UserGroups" domainObjectName="UserGroups"
               enableCountByExample="true"
               enableUpdateByExample="true"
               enableDeleteByExample="true"
               enableSelectByExample="true"
               selectByExampleQueryId="true">
            <property name="jacksonFormats" value="createDate@yyyy-MM-dd HH:mm:ss"></property>
        </table>

        <!--<table tableName="item" domainObjectName="Item"-->
        <!--enableCountByExample="true"-->
        <!--enableUpdateByExample="true"-->
        <!--enableDeleteByExample="true"-->
        <!--enableSelectByExample="true"-->
        <!--selectByExampleQueryId="true">-->

        <!--&lt;!&ndash; optional.插入时,是否生成selectKey元素 &ndash;&gt;-->
        <!--&lt;!&ndash;<generatedKey column="id" sqlStatement="SELECT LAST_INSERT_ID()" identity="true" type="post"/>&ndash;&gt;-->

        <!--&lt;!&ndash; optional.忽略某一列 &ndash;&gt;-->
        <!--&lt;!&ndash;<ignoreColumn column="gmt_create"  delimitedColumnName="true" />&ndash;&gt;-->

        <!--&lt;!&ndash;optional.覆盖Model的生成规则,主要是设置javaType &ndash;&gt;-->
        <!--<columnOverride column="idItem" javaType="java.lang.Long"	jdbcType="INTEGER"	typeHandler=""	delimitedColumnName="" />-->

        <!--</table>-->
    </context>

</generatorConfiguration>
